Блог
В блоге есть:
- список из записей пользователей
- тексты пользователей

Создаем форму, где будут два поля для ввода данных:
- заголовок 1 (имя пользователя, личные данные)
- заголовок 2 (заголовок текста записи)

        <form action="#" method="post" name="blog">
            <p><b>Ваше имя:</b><br>
            <input type="text" size="40">
            <p><b>Заполните поля ниже:</b><Br>
            <input type="" name="title" value="Введите заголовок"> Заголовок<Br>
            <textarea name="content" cols="40" rows="3" value=""></textarea> Текст</p>
            <p><input type="submit" value="Отправить">
        </form>

После того, как пользователь введет эти данные,
их нужно будет отправить, и одновременно создать (если его еще не существует, если это первая запись в блоге)
список, куда положить эти записи как массив, где каждой записи будет присвоен идентификационный номер
Случай, когда список уже существует, это вторая и последующие записи в блоге, введенные данные надо просто будет
записать в конец списка (+1 запись) и так же присвоить ID

Необходимо:

- форма отправки (кнопка)
<p><input type="submit" value="Отправить">

- создать список (List)

- положить туда введенные данные (заголовок)
file_put_contents("list", "1 >>> ".$_POST["title"]);

- положить туда же введеные данные (текст)
file_put_contents ('txt/1.html', $_POST["content"]);

- из строчки введенных данных создать упорядоченный массив ($array)

Общий вид массива:
array(
    key  => value,      - ключ => значение,
    key2 => value2,
    key3 => value3,
    ...
)

Пример:
PHP скрипт:

<?php
$array = array(
    "foo" => "bar",
    "bar" => "foo",
    100   => -100,
    -100  => 100,
);
var_dump($array);      // напечатает массив
?>

Результат выполнения данного примера:

array(4) {
  ["foo"]=>
  string(3) "bar"
  ["bar"]=>
  string(3) "foo"
  [100]=>
  int(-100)
  [-100]=>
  int(100)
}

- разбить массив построчно
$array = explode("\n", $string);
- вывести на печать
echo '$array: ';

- присвоить ID
- положить в список
- вернуть список

- создать переменную, которая будет указывать на массив, чтобы были возможны операции с массивом
- разбить массив по символу >>>
$a = explode( " >>> ", $last);
- dsdtcnb yf gtxfnm
print_r ($a);

- теперь нужно добавить новую запись,
и положить ее в коннец списка
- введем новую переменную
- к старой (послдней) записи прибавим единицу
$b = $a[0] + 1; 
  
  
Далее создается директория
для того, чтобы класть туда все записи (заголовки с ID номерами, по которым можно будет обратиться к записи блога конкретного пользователя)

Необходимо:
- создать директорию, например txt/ - тут будут лежать тексты формата html
file_put_contents ('txt/'.$b.'.html', $_POST["content"]);

- положить туда первую запись (заголовок)
file_put_contents("list", "\n".$b.' >>> '.$_POST["title"], FILE_APPEND);
$b - данна переменная указывает на новый номер записи
>>> - условный разделитель (для данного скрипта), по которому мы разделяем массив

Пример!!!

Ввели в поля:
- имя
- заголовок
- текст
- нажали отправить

Итог: массив
Array ( 
[title] => Title_new 
[content] => Moo-moo-moo ) 
Title_newMoo-moo-moo 
$array: Array ( 
[0] => 1 >>> New 
[1] => 2 >>> New 
[2] => 3 >>> New ) 
$last: 3 >>> New 
$a: Array ( 
[0] => 3 
[1] => New )

 , ГДЕ
 
[0] - индекс массива (исчисление массива всегда ведется с нуля)
=>   - указатель на..
1 >>> New - элемент (строка, которую мы потом разобьем на строки, по элементу >>>)

После разбивки это примет вид:
[0] => 1
[1] => New






Далее нужно вывести список заголовков ($_POST["title"])
и каждый заголовок должен будет содержать в себе ссылку на свой текст

Реализация:
 - file_get_contents — Читает содержимое файла в строку
 таким образом можно вывести содержимое файла list (то есть заголовки)
 
 $lists = file_get_contents ("list");
                    echo $lists;
                    
                    

 - чтобы прочитать, что находится в директории, нужно обратить к ней
 Например:
 
                $dir = "txt";
                    if (is_dir ($dir)) {   
                        echo $dir.' - директория существует;<br>'; 
                        $files = scandir($dir); 
                           print_r($files);                                                 
                            for ($i=0; $i<sizeof($files); $i++) 
                            echo '-файл: '.$files[$i].';<br>';              //выводим все файлы
                    } 
                    else echo $dir.' -такой директории нет;<br>';                   
                    }

    scandir
    scandir — Получает список файлов и каталогов, расположенных по указанному пути
    
   Вывод:
   
   -файл: 10.html;
-файл: 11.html;
-файл: 12.html;
-файл: 13.html;
-файл: 14.html;
-файл: 15.html;
-файл: 16.html;
-файл: 17.html;
-файл: 18.html;
-файл: 5.html;
-файл: 6.html;
-файл: 7.html;
-файл: 8.html;
-файл: 9.html;

    
                    
- Управляющая конструкция foreach
foreach (array_expression as $key => $value)
    statement
Конструкция foreach предоставляет простой способ перебора массивов



